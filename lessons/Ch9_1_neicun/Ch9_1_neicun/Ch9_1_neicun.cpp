//// 栈和堆的主要区别：
// *1) 管理方式不同：栈是系统自动管理的，在出作用域时，将自动被释放; 
//			堆需手动释放，若程序中不释放，程序结束时由操作系统回收。
// *2) 空间大小不同：堆内存的大小受限于物理内存空间; 
//			而栈就小得可怜，一般只有8M(可以修改系统参数)。
// 3) 分配方式不同：堆是动态分配; 栈有静态分配和动态分配(都是自动释放)。
// 4) 分配效率不同：栈是系统提供的数据结构，计算机在底层提供了对栈的支持，
//			进栈和出栈有专门的指令，效率比较高; 堆是由C++函数库提供的。
// 5) 是否产生碎片：对于栈来说，进栈和出栈都有着严格的顺序(先进后出)，不会产生碎片; 
//			而堆频繁的分配和释放，会造成内存空间的不连续，容易产生碎片，太多的碎片会导致性能的下降
// 6) 增长方向不同:栈向下增长，以降序分配内存地址; 堆向上增长，以升序分配内存地址。


//// 动态分配内存 new 和 delete

// 使用堆区的内存有四个步骤:
// 1) 声明一个指针; 
// 2) 用 new 运算符向系统申请一块内存，让指针指向这块内存; 
// 3) 通过对指针解引用的方法，像使用变量一样使用这块内存; 
// 4) 如果这块内存不用了，用 delete 运算符释放它。
// 申请内存的语法 : new 数据类型(初始值);	// C++11 支持{}
// 如果申请成功，返回一个地址; 如果申请失败，返回一个空地址(暂时不考虑失败的情况)
// 释放内存的语法：delete 地址，地址用指针变量

#include <iostream>
using namespace std;

int main()
{
	int* p = new int(5);						// 完成了1), 2)
	cout << "*p=" << *p << endl;
	*p = 8;											// 3)
	cout << "*p=" << *p << endl;
	delete p;										// 4)
	// 不释放内存，后果 会很严重！！
}

// 注意：
// 动态分配出来的内存没有变量名，只能通过指向它的指针来操作内存中的数据。
// 如果动态分配的内存不用了，必须用 delete 释放它，否则有可能用尽系统的内存。
// 动态分配的内存生命周期与程序相同，程序退出时，如果没有释放，系统将自动回收。
// 就算指针的作用域已失效，所指向的内存也不会释放。
// 用指针跟踪已分配的内存时，不能跟丢。
