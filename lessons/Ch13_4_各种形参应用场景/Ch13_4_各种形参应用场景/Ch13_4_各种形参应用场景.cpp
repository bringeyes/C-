// Ch13_4_各种形参应用场景.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>

int main()
{
    std::cout << "Hello World!\n";
}

// 传值、传地址和传引用的指导原则《C++Primer Plus》
// 1)  如果不需要在函数中修改实参：
//      如果实参很小，如C++内置的数据类型或小型结构体，则按值传递。
//      如果实参是数组，则使用 const指针，因为这是唯一的选择（没有为数组建立引用的说法）
//      如果实参是较大的结构，则使用 const 指针或 const 引用。
//      数据实参是类，则使用 const引用，传递类的标准方式是按引用传递。

// 2)  如果需要在函数中修改实参
//      如果实参是内置数据类型，则使用指针。只要看到func(&x)的调用，表示函数将修改 x。
//      如果实参是数组，则只能使用指针。
//      如果实参是结构体，则使用指针或引用。
//      如果实参是类，则使用引用。

// 当然，这只是一些指导原则，很可能有充分的理由做出其他的选择。“
// 例如 : 对于基本类型，cin 使用引用，因此可以使用 cin >> a，而不是cin >> &a。