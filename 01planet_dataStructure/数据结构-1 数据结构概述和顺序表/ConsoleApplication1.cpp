/*
数据结构：数据之间的关系
逻辑结构：思路
+
存储结构（物理结构/映像）：代码落地

逻辑结构:
线性逻辑结构:线性表（顺序表 链表） 栈 队列
非线性的逻辑结构:树()图()

存储结构:
顺序存储结构:逻辑结构中相邻的数据，在存储时，物理上也相邻
链式存储结构:逻辑结构中相邻的数据，在存储时，物理上可能不相邻，但是我们通过指针，实现逻辑上的相邻

线性结构：
如果一个数据元素序列满足:
1.除第一个和最后一个数据元素外，每个数据元素只有一个前驱数据元素和一个后继数据元素;
2.第一个数据元素没有前驱数据元素;
3.最后一个数据元素没有后继数据元素;
*/

/*
顺序表
在数组中，我们会先申请一段连续的内存空间，然后把数组以此存入内存当中，中间没有一点空隙。这就是一种顺序表存储数据的方式。
	对于顺序表的基本操作有:增(add)，删(remove)，改(set)，查(find)，插(insert)。
应用场景：适用于不需要对数据进行大量改动的结构
*/

#include <iostream>
#include "ArrayList.h"
using namespace std;

int main()
{
	// 初始化、增
	ArrayList* arr = initArray();
	cout << arr->maxsize << ", " << arr->size << endl;
	for (int i = 0; i < 10; i++) add(arr, i * 2);
	display(arr);

	// 插入
	insert(arr, 5, 99);
	display(arr);

	// 删除
	del(arr, 99);
	display(arr);
}