/*
二叉树
二叉排序树（BST）
二叉平衡树（AVL树）
哈夫曼树

红黑树
B树
B+树

满二叉树：所有叶子结点都在同一层（深度为k，且有2^k-1个结点，k>=1）
完全二叉树：结点按层依次编号（从1开始），满二叉树 去掉最后编号的若干个(可以为0)结点的二叉树
	所有叶子结点出现在第 k 层或第 k-1 层

性质：
	第i层结点 最多2^(i-1)个
	总结点数最多 2^k-1
	叶结点数 = 度为2的结点数 + 1
		n0 = n2 + 1
		n = n0 + n1 + n2	// 度为0 度为1 度为2
		n = n1 + 2*n2 + 1
			// 此公式的另一个理解：根结点 1 + 所有孩子结点 = 1 + 0*n0 + 1*n1 + 2*n2

	具有n个结点的 完全二叉树 的深度为 log2(N) + 1 （向下取整）或 log2(n+1) 向上取整
	具有n个结点的 完全二叉树，编号依次（从上到下，从左到右），除根结点外，
		满足[i/2, i, 2i, 2i+1]的规则，父结点编号，编号，左孩子编号，右孩子编号

二叉树存储方式：5种
二叉树遍历方式：
	广度遍历（层次遍历）
	深度遍历：先序遍历、中序遍历、后序遍历
*/

#include <iostream>
#include "test.h"
#include "binary_tree.h"
using namespace std;

int main()
{
	// test01();
	// test02();
	test03();
}