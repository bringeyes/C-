/*
队列的本质---也是受限的线性表（先进先出，后进后出）
允许删除的一端---队头
允许添加的一端---队尾
操作---增（入队）、删（出队）、查（查看队首元素，不存在遍历队列）

//---------------------------
顺序队列---基于数组，数组只是存储空间，只有队首 front 和队尾 rear 之间的部分才是队列
	（队首"指针"、队尾"指针"，本质下标，int）
	(1) 初始化 f = 0, r = 0，r指向真正队尾的下一位置（初始化时队尾 r 应该在 f 之前）
		k 入队：a[r]=k; r++;
		出队：删除队首元素，f++
	(2) 初始化 f = 0, r = -1

	顺序队列的缺点---假溢出（队列的实际长度受数组长度限制）
	解决方法：通过引入 取余 使得数组达到收尾相接的效果--->循环数组
链式队列---基于链

//---------------------------
循环队列
初始化 f = 0, r = 0	指向同一位置
k 入队：a[r]=k; r = ++r%max;
判空：f=r
判满：牺牲一个内存空间 if (r+1==f) 以空间换效率；	（常用）
	f=r 增加一个flag 入队/出队标记，判满一定入队	（不常用）

队列的应用场景：计算机中一切需要排队的情况：主机和外部设备不匹配、多用户资源竞争

//---------------------------
双端队列（更像堆栈）
两端均可添加和删除，中间不允许
基于循环数组，把空间利用起来
左端“指针” l		右端“指针” r
初始化： l = r = 0
左端插入： a[l] = k; l = (l-1+Max)%Max
右端插入： r = (r+1)%Max; a[r] = k;	防止首次插入时发生元素覆盖
判空：if(sum==0)
判满：if(sum==Max)

*/

#include <iostream>
#include "test.h"
using namespace std;

int main()
{
	// test01();
	// test02();
	// test03();
	test04();
}